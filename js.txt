可以在同一个页面引入多个.js文件，浏览器按顺序一次执行。可以在script里写js代码。引入文件放在head里面。页面内的js代码放在body的最下边。

不可以用Word或写字板来编写JavaScript或HTML，因为带格式的文本保存后不是纯文本文件，无法被浏览器正常读取。也尽量不要用记事本编写，它会自作聪明地在保存UTF-8格式文本时添加BOM头。

js严格区分大小写。

Number 字符串 布尔型    == 会自动转换数据类型 === 不会转换数据类型  坚持使用===

NaN与任何值都不相等    isNaN(xxx)判断xxx是否是NaN

两个浮点数的比较相等计算机不能准确表示无限循环小数。因此，在遇到两个浮点数进行比较时，需要小心。使用两个浮点数的差的绝对值是否小于某个阈值来进行判断。    记住，浮点数在运算过程中会出现偏差。0.1+0.2不等于0.3，而是0.30000000000000004。

null和undefined   null和0和""没有直接关系，0和""是一个具体的数值而已，null表示空。undefined表示值未定义。undefined在判断函数参数传递是否有用的情况下使用。

数组 顺序排列的集合，集合中的每个值称为元素。集合中的元素的数据类型可以不相同。下标从0开始。元素之间用,相隔。两种创建方式：1.[2,4,"f",true] 2.new Array(2,5,"dde",false)   推荐使用1，数组长度可变的。数组长度是你对数组赋值时使用的最大下表+1

对象   无序的键值对类型。键是字符串类型，值可以是任何数据类型。每个键都是对象的属性，引用对象的属性用对象.属性来使用。对象的例子
var obj={
	name:'aa',
	age:18,
	sco:["nanzhong","nefu"]
}   
引用：obj.name|obj.sco[0]

变量 变量用var声明。变量名可以由大小写字母，数字，$,_组成，数字不能作开头。而且不能使用关键字做变量名。也可以使用中文，但尽量避免。用等号=对变量进行赋值。可以重复赋值，每次赋值可以是不同数据类型的值。因此，这种可以动态赋值的语言叫做动态语言。js就是动态语言。而java就是静态语言

strict模式   未用var声明的变量是全局变量。如果全部不使用var，那么可以会引起变量冲突，变量之间会相互影响。为了消除这种弊端，推出"use strict"把这行代码放在js代码的第一行，强制所有变量都是用var来声明，不使用则会在使用这些变量的时候出错。

字符串 用''或"".如果字符串内容含有单引号或双引号，那么外边就用另外一种来包含。如果都有，就转义一种，用\来转移  \n表示换行\t表示制表符\\表示\
多行字符串   在ES6中推出了一种方法来代替换行。就是用反单引号` 例如
`dhsdh
fhgfe
fgfhf`    即可达到目的
字符串之间的连接使用加号+，但是如果有很多变量需要进行连接，就会比较麻烦。ES6推出了一种方法解决了这个问题。即ES6模板字符串  例如
var str1="xiaoming";
var str2="gaosanban"
var str3=`${str1}zai${str2}`;
console.log(str3);                 即ES6模板字符串。还是使用反单引号。遇到变量自动转换成变量的值

数组 可以包含任何数据类型，并通过索引来访问元素要取得数组的长度，访问数组的属性length.可以直接给length赋值，改变数组的大小。避免直接修改数组的大小。访问索引时避免越界

对象   键值对  xxx:xxx用，分隔开。最后一个不用，因为有的浏览器会出错。包含在{}中。键必须是有效的变量名，如果无效，就用''来包括。访问这个属性时就不能用.来访问，用obj['xxx']来访问   属性名尽量使用标准的变量名，那样就可以obj.prop的形式进行访问属性   访问不存在的属性，返回undefined   js的对象是动态类型，可以对其增加或删除属性。增obj.name='abc'删delete obj.name   检测一个属性是否在这个对象中，用in操作符  例：'name' in obj

条件判断   if    if..else  if else if  else   可以嵌套

js把null undefined 0 '' NaN都视为false，其他值一概视为true

循环  for循环  起始条件  判断条件   递增条件   常用于遍历数组      for..in循环  常用于遍历对象     break continue   for..in循环出来的都是string类型.   while只有判断条件   do..while先执行在进行判断，因此这种最少执行一次

Map和Set	js默认对象是键值对形式  键必须是字符串   但其他数据类型也可以做键  ES6开发了这种方法    var m=new Map()  var s=new Set()
var m=new Map([['hahaha',56],['hudh','yue']])  初始化Map需要一个二维数组，或者直接初始化一个空的Map   Map方法   set(xxx,xxx) get(xxx) delete(xxx) has(xxx)  一个key只能有一个value  重复设置会覆盖      var s=new Set([3,5,7,'sd',0])   Set是一组键的集合   键不能重复   方法add(xxx) delete(xxx)

遍历Array可以使用下标 ，但Map和Set无法使用.因此，ES6引入了一种新的数据类型iterable ,Array Map Set都属于这种类型 属于iterable类型的集合可以使用for..of来遍历   for..in  for..of 再给数组加一个额外的属性时，用for..in遍历时可以会把额外加的属性也会遍历出来
而for..of则不会它只遍历集合本身的元素，最好的遍历方法是用iterable的内置的forEach方法   forEach方法是ES5的方法   例
var a=[3,'f',5];
a.forEach(function(element,index,iterable){//element:当前元素本身  index:元素索引   iterable:当前集合   
	
});             Map:value key map   Set:key key set  Array:element index array
js的函数调用不要求参数必须一致，因此可以省略参数 

函数  代码有规律的重复时，注意使用函数。函数是抽象的，函数本身只需要写一次，就可以多次调用。函数的定义:function关键字 函数名  (xxx)参数 {xxx}函数体   执行函数体时，遇到return语句时,函数执行完毕。没有return,会返回undefined,,函数也是一个对象，函数名是指向函数的变量
匿名函数，省略函数名，需要将匿名函数赋值给一个变量，或者作为一个参数，给变量赋值时需要在结束时加一个分号，以表示赋值的结束，，调用函数时，按顺序传入参数即可。。js允许向函数传递任意个参数而不影响调用，如传入的参数比需要的参数少时，返回时会返回NaN,因为未收到的参数是undefined。
js有一个关键字arguments,只在函数内部起作用，指向函数调用者传入的所有参数，类似Array，但不是Array，常用于判断参数个数   arguments.length  arguments[i]          	ES6推出了一个参数rest用来接收多余的参数     sum(...rest)   sum(a,b,...rest)   sum()
js引擎会在行末自动添加分号 《==  注意return语句的一个大坑 