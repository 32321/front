1.你在昨天/本周学习到了什么？
2.编写代码的哪些方面让你兴奋或感兴趣？
3.你最近遇到什么技术挑战？你是如何解决的？							
------------------------------------------------------------------------------------------
html
1.Doctype作用？标准模式与兼容模式有何区别？
1)<!Doctype>位于html文档中的第一行，处于<html>标签之前。告知浏览器的解析器用什么文档标准解析这个文档。Doctype不存在或格式不正确会导致文档以兼容模式呈现。
2)标准模式的排版和js的运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作.
2.html5为什么只需要写<!Doctype html>
html5不基与SGML,因此不需要对dtd引用，但是需要doctype来规范浏览器的行为(让浏览器按照他们应该的方式来运行)；而html4.01基于SGML，所以需要对dtd进行引用，才能告知浏览器文档所使用的文档类型.

1.viewport
<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">
//width     设置viewport宽度，为一个正整数或字符串'device-width'    device-width:设备宽度     一般设置了宽度，会自动解析出高度，所以不用设置。
//initial-scale 默认缩放比例    最大   最小         
2.事件的各个阶段
1.捕获阶段--》2.目标阶段--》3.冒泡阶段document--》target目标--》document  
由此，addEventListener的第三个参数设置为true和false的区别已经非常清晰了：true表示该元素在事件的捕获阶段(由外向内传递时)响应事件  false表示该元素在事件的"冒泡阶段"(由内向外传递时)响应事件。
3.let var const
let允许你声明一个作用域被限制在块级中的变量，语句或表达式，let绑定不受变量提升的约束，这意味着let声明不会提升到当前，该变量处于从块开始到初始化处理的"暂存死区"。
var声明变量的作用域限制在其声明位置的上下文中，而非声明变量总是全局的，由于变量声明(以及其他声明)总是在任意代码执行之前处理的，所以在代码中的任意位置声明变量总是等效于在代码开头声明。
const声明创建一个值的只读引用(即指针)  先介绍一下js常用类型 String Number Boolean Array Object Null Undefined   其中基本类型由Undefined Null Boolean Number String保存在栈中;复合类型由Array,Object保存在堆中。
基本数据当值发生改变时，那么其对应的指针也将发生改变，故造成const申明基本数据类型时，再将其值改变，将会报错。例如const a=3,a=5时将会报错;但是如果是复合类型时，如果只改变符合类型的其中某个Value项时，将还是正常使用。
